# ðŸš— RX VeÃ­culos - Dockerfile Corrigido
# Multi-stage build otimizado para resolver Exit Code 128

# Stage 1: Dependencies
FROM node:20-alpine AS deps
# Instalar dependÃªncias necessÃ¡rias para git e SSL
RUN apk add --no-cache \
    libc6-compat \
    git \
    ca-certificates \
    openssl

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files
COPY package.json pnpm-lock.yaml* ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Stage 2: Builder
FROM node:20-alpine AS builder
# Instalar dependÃªncias necessÃ¡rias
RUN apk add --no-cache \
    libc6-compat \
    git \
    ca-certificates \
    openssl

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Build application
RUN pnpm build

# Stage 3: Runner
FROM node:20-alpine AS runner
# Instalar dependÃªncias de runtime
RUN apk add --no-cache \
    ca-certificates \
    curl \
    wget \
    dumb-init

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set ownership
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set environment
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]
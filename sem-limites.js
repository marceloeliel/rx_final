#!/usr/bin/env node

/**
 * üöÄ SCRIPT: SEM LIMITES
 * 
 * Este script libera usu√°rios do per√≠odo de trial e concede acesso ilimitado
 * 
 * USO:
 * node sem-limites.js <email_do_usuario>
 * 
 * EXEMPLOS:
 * node sem-limites.js rxnegocio@yahoo.com
 * node sem-limites.js marcelo@teste.com
 * node sem-limites.js usuario@exemplo.com
 */

require('dotenv').config({ path: '.env.local' })

const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas!')
  console.log('Certifique-se de que NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas no .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function liberarUsuarioSemLimites(email) {
  try {
    console.log(`üîç Procurando usu√°rio ${email}...`)
    
    // Buscar o usu√°rio pelo email
    const { data: userData, error: userError } = await supabase.auth.admin.listUsers()
    
    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', userError)
      return false
    }
    
    const user = userData.users.find(u => u.email === email)
    
    if (!user) {
      console.error(`‚ùå Usu√°rio ${email} n√£o encontrado!`)
      console.log('\nüìã Usu√°rios dispon√≠veis:')
      userData.users.forEach(u => {
        console.log(`  - ${u.email} (${u.id})`)
      })
      return false
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', user.email)
    console.log('üÜî ID do usu√°rio:', user.id)
    
    // Buscar o perfil do usu√°rio
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single()
    
    if (profileError) {
      console.error('‚ùå Erro ao buscar perfil:', profileError)
      return false
    }
    
    console.log('üìã Perfil atual:')
    console.log('  - Nome:', profileData.nome_completo)
    console.log('  - Plano atual:', profileData.plano_atual)
    console.log('  - Acesso ilimitado:', profileData.unlimited_access)
    console.log('  - Data in√≠cio plano:', profileData.plano_data_inicio)
    console.log('  - Data fim plano:', profileData.plano_data_fim)
    
    // Verificar se existe na tabela trial_periods
    const { data: trialData, error: trialError } = await supabase
      .from('trial_periods')
      .select('*')
      .eq('user_id', user.id)
      .single()
    
    if (trialError && trialError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao verificar trial:', trialError)
    } else if (trialData) {
      console.log('üìÖ Dados do trial:')
      console.log('  - Tipo do plano:', trialData.plan_type)
      console.log('  - Data in√≠cio:', trialData.start_date)
      console.log('  - Data fim:', trialData.end_date)
      console.log('  - Convertido para pago:', trialData.converted_to_paid)
    } else {
      console.log('‚ÑπÔ∏è Usu√°rio n√£o est√° na tabela trial_periods')
    }
    
    // Atualizar o perfil para acesso ilimitado
    console.log('\nüîÑ Atualizando perfil para acesso ilimitado...')
    
    const updateData = {
      unlimited_access: true,
      plano_atual: 'ilimitado',
      plano_data_inicio: new Date().toISOString(),
      plano_data_fim: null, // Sem data de fim para acesso ilimitado
      updated_at: new Date().toISOString()
    }
    
    const { error: updateError } = await supabase
      .from('profiles')
      .update(updateData)
      .eq('id', user.id)
    
    if (updateError) {
      console.error('‚ùå Erro ao atualizar perfil:', updateError)
      return false
    }
    
    console.log('‚úÖ Perfil atualizado com sucesso!')
    
    // Se existir na tabela trial_periods, marcar como convertido
    if (trialData) {
      console.log('\nüîÑ Atualizando status do trial...')
      
      const { error: trialUpdateError } = await supabase
        .from('trial_periods')
        .update({ 
          converted_to_paid: true,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', user.id)
      
      if (trialUpdateError) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel atualizar trial_periods:', trialUpdateError)
      } else {
        console.log('‚úÖ Trial marcado como convertido para pago!')
      }
    }
    
    // Verificar se a atualiza√ß√£o foi bem-sucedida
    console.log('\nüîç Verificando atualiza√ß√£o...')
    
    const { data: verifyData, error: verifyError } = await supabase
      .from('profiles')
      .select('unlimited_access, plano_atual, plano_data_inicio, plano_data_fim')
      .eq('id', user.id)
      .single()
    
    if (verifyError) {
      console.error('‚ùå Erro ao verificar atualiza√ß√£o:', verifyError)
      return false
    }
    
    console.log('‚úÖ Verifica√ß√£o final:')
    console.log('  - Acesso ilimitado:', verifyData.unlimited_access)
    console.log('  - Plano atual:', verifyData.plano_atual)
    console.log('  - Data in√≠cio plano:', verifyData.plano_data_inicio)
    console.log('  - Data fim plano:', verifyData.plano_data_fim)
    
    console.log('\nüéâ USU√ÅRIO LIBERADO COM SUCESSO!')
    console.log('üìß Email:', user.email)
    console.log('üîì Status: Acesso ilimitado ativo')
    console.log('üìÖ Data de libera√ß√£o:', new Date().toLocaleString('pt-BR'))
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
    return false
  }
}

async function main() {
  const email = process.argv[2]
  
  if (!email) {
    console.log('üöÄ SCRIPT: SEM LIMITES')
    console.log('========================')
    console.log('')
    console.log('Este script libera usu√°rios do per√≠odo de trial e concede acesso ilimitado')
    console.log('')
    console.log('USO:')
    console.log('  node sem-limites.js <email_do_usuario>')
    console.log('')
    console.log('EXEMPLOS:')
    console.log('  node sem-limites.js rxnegocio@yahoo.com')
    console.log('  node sem-limites.js marcelo@teste.com')
    console.log('  node sem-limites.js usuario@exemplo.com')
    console.log('')
    console.log('‚ö†Ô∏è  IMPORTANTE: Certifique-se de que o usu√°rio existe no sistema')
    console.log('')
    process.exit(1)
  }
  
  console.log('üöÄ SCRIPT: SEM LIMITES')
  console.log('========================')
  console.log('üìß Email:', email)
  console.log('üìÖ Data:', new Date().toLocaleString('pt-BR'))
  console.log('')
  
  const success = await liberarUsuarioSemLimites(email)
  
  if (success) {
    console.log('\n‚úÖ Script executado com sucesso!')
    process.exit(0)
  } else {
    console.log('\n‚ùå Script falhou! Verifique os erros acima.')
    process.exit(1)
  }
}

// Executar o script
main().catch((error) => {
  console.error('‚ùå Erro fatal:', error)
  process.exit(1)
})

